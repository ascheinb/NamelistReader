NamelistReader can be used to read in a set of Fortran namelists from a file. A simple use example:

#include "NamelistReader.hpp"
  
int main(){
    NLReader::NamelistReader nlr("input_file"); // All file reading is done here

    // Specify the namelist you want to read from
    nlr.use_namelist("first_namelist");

    // By default, no inputs are required. If you want, you can use this to ensure that the following
    // parameters are present and read
    nlr.begin_required();

    // Set your variable to the matching string in the namelist
    // Set currently accepts bool, int, double, float, and std::string
    // Provide a default value if the variable isn't found in the namelist
    int my_int = nlr.set("my_int", 1);
    float my_float = nlr.set("my_float", 0.0f);

    // If you want to go to a different namelist, use use_namelist again:
    nlr.use_namelist("second_namelist");
    std::string my_string = nlr.set("my_string", "default_string");

    // If you set begin_required(), you can revert back any time and the following parameters
    // will be considered optional again.
    nlr.begin_optional();

    string my_other_string = nlr.set("my_other_string", "another_default"); // (Still in "second_namelist")

    nlr.use_namelist("third_namelist");
    double my_double = nlr.set("my_double", 0.0);

    // If the parameter in the namelist has multiple values, you have to read them individually,
    // by specifying the index of the value as a third, optional argument. e.g. if your namelist has:
    // double_list = 3.14d0 2.72d0
    // and you want it to populate a vector, then do the following:
    std::vector<double> double_list(2);

    for (int i = 0; i<double_list.size(); i++){
        double_list[i] = nlr.set<double>("double_list",0.0,i);
    }

    // Lastly, unlike when reading in Fortran, you will not get an error if there are
    // parameters present in the namelist that are not used. You can check for such
    // parameters:
    if (!nlr.check_all_used()) printf("\nExtra parameters in the namelist!\n");
    
}
